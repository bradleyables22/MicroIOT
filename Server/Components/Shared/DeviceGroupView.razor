@using Radzen
@using Radzen.Blazor
@using Server.Components.Models
@using Server.Extensions
@inject IDeviceRepository _repo

@if (Group is not null)
{
    <div class="col-md mt-3">
        <div class="card bg-secondary-subtle">
            <div class="card-body">
                <DeviceGroupHeader Group="Group" OnUpdate="GroupUpdated" />

                @if (Group.DeactivatedOn == null)
                {
                    <div class="row mt-3">
                        <div class="col-md-12">
                            @if (Group is not null && Group.Devices != null && Group.Devices.Any())
                            {
                                <div class="row"></div>
                                foreach (var device in Group.Devices)
                                {
                                    <DeviceCard Device="device"/>
                                }
                            }
                            else { }
                        </div>
                    </div>
                }
                else
                {
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <p>Device group must be reactivated to have access to its devices.</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public DeviceGroup Group { get; set; }
    [Parameter] public EventCallback<DeviceGroup> OnDeviceUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        //this will auto nest in group if any
        var devices = await _repo.GetWhere(x => x.DeviceGroupID == Group.DeviceGroupID);
    }

    private async Task GroupUpdated(DeviceGroup g)
    {
        Group = g;
        await OnDeviceUpdated.InvokeAsync(g);
    }
   

}
