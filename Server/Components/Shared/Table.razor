@using System.Reflection
@using Server.Attributes
@typeparam TItem

@if (EnableAdd)
{
    <div class="btn btn-outline-primary btn-sm mb-3 fw-bold" @onclick="AddClick">@AddText</div>
}
<table class="table table-hover align-middle shadow">
    <thead>
        <tr>
            @foreach (var column in OrderedColumns)
            {
                <th scope="col">
                    <button class="btn btn-link p-0 text-decoration-none fw-bolder"
                            @onclick="() => ApplySort(column.Property)">
                        @column.Attribute.Display
                        @if (SortColumn == column.Property)
                        {
                            <i class="bi @(SortDescending ? "bi-caret-down-fill" : "bi-caret-up-fill") ms-1"></i>
                        }
                    </button>
                </th>
            }
            @if (EnableDelete)
            {
                <th scope="col" style="width:30px" class="text-end"></th>
            }

        </tr>
        <tr>
            @foreach (var column in OrderedColumns)
            {
                var key = column.Property.Name;
                <th>
                    @if (column.Property.PropertyType == typeof(bool) || column.Property.PropertyType == typeof(bool?))
                    {
                        <select class="form-select form-select-sm"
                                @bind="Filters[key]"
                                @bind:event="onchange">
                            <option value="">(Any)</option>
                            <option value="true">@column.Attribute.TrueLabel</option>
                            <option value="false">@column.Attribute.FalseLabel</option>
                        </select>
                    }
                    else if (column.Property.PropertyType == typeof(DateTime) || column.Property.PropertyType == typeof(DateTime?))
                    {
                        <input class="form-control form-control-sm"
                               type="date"
                               value="@Filters[key]"
                               @oninput="e => Filters[key] = e.Value?.ToString() ?? string.Empty" />
                    }
                    else if (column.Property.PropertyType == typeof(TimeOnly) || column.Property.PropertyType == typeof(TimeOnly?))
                    {
                        <input class="form-control form-control-sm"
                               type="time"
                               value="@Filters[key]"
                               @oninput="e => Filters[key] = e.Value?.ToString() ?? string.Empty" />
                    }
                    else
                    {
                        <input class="form-control form-control-sm"
                               placeholder="Filter"
                               @bind="Filters[key]"
                               @bind:event="oninput" />
                    }
                </th>
            }
            @if (EnableDelete)
            {
                <th></th>
            }

        </tr>
    </thead>
    <tbody>
        @if (loading)
        {
            <tr>
                <td>
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </td>
            </tr>
        }
        else
        {
            @if (SortedAndFilteredItems.Any())
            {
                @foreach (var item in SortedAndFilteredItems)
                {
                    <tr @onclick="() => OnRowClick(item)" style="cursor: pointer;" class="table-active">
                        @foreach (var column in OrderedColumns)
                        {
                            var value = column.Property.GetValue(item);
                            <td style="min-width:50px; max-width:500px;" class="text-truncate">
                                @if (column.Property.PropertyType == typeof(bool) || column.Property.PropertyType == typeof(bool?))
                                {
                                    var isTrue = value is bool b && b;
                                    @((isTrue ? column.Attribute.TrueLabel : column.Attribute.FalseLabel) ?? "")
                                }
                                else if (column.Property.PropertyType == typeof(DateTime) || column.Property.PropertyType == typeof(DateTime?))
                                {
                                    var dt = value as DateTime?;
                                    @dt?.ToString("yyyy-MM-dd")
                                }
                                else if (column.Property.PropertyType == typeof(TimeOnly) || column.Property.PropertyType == typeof(TimeOnly?))
                                {
                                    var t = value as TimeOnly?;
                                    @t?.ToString("HH\\:mm")
                                }
                                else
                                {
                                    @value
                                }
                            </td>
                        }
                        @if (EnableDelete)
                        {
                            <td class="text-end">
                                <button class="btn btn-sm btn-close"
                                @onclick:stopPropagation
                                        @onclick="() => ShowDeleteConfirm(item)"
                                        aria-label="Delete"></button>
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No data</td>
                </tr>
            }
        }

    </tbody>
</table>

@if (EnableDelete)
{
    <ConfirmModal T="TItem"
                  @ref="_confirmModal"
                  Title="Confirm Delete"
                  Message="Are you sure you want to delete this item?"
                  OnConfirmed="ConfirmDelete" />
}
@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public EventCallback<TItem> RowClicked { get; set; }
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public bool EnableDelete { get; set; } = true;
    [Parameter] public bool EnableAdd { get; set; } = true;
    [Parameter] public string AddText { get; set; } = "New";
    private bool loading { get; set; } = true;
    private List<(PropertyInfo Property, TableColumnAttribute Attribute)> OrderedColumns = new();
    private ConfirmModal<TItem>? _confirmModal;
    private TItem? ItemToDelete;

    private PropertyInfo? SortColumn;
    private bool SortDescending;
    private Dictionary<string, string> Filters = new();

    protected override void OnParametersSet()
    {
        OrderedColumns = typeof(TItem)
            .GetProperties()
            .Select(p => (Property: p, Attribute: p.GetCustomAttribute<TableColumnAttribute>()))
            .Where(p => p.Attribute != null)
            .OrderBy(p => p.Attribute.Order)
            .ToList();

        foreach (var column in OrderedColumns)
        {
            var key = column.Property.Name;
            if (!Filters.ContainsKey(key))
                Filters[key] = string.Empty;
        }

        loading = false;
    }

    private async Task OnRowClick(TItem item)
    {
        if (RowClicked.HasDelegate)
        {
            await RowClicked.InvokeAsync(item);
        }
    }

    private void ShowDeleteConfirm(TItem item)
    {
        ItemToDelete = item;
        _confirmModal?.Show(item);
    }

    private async Task ConfirmDelete(TItem? item)
    {
        if (item != null && OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(item);
        }

        ItemToDelete = default;
    }
    private async Task AddClick()
    {
        if (OnAdd.HasDelegate)
        {
            await OnAdd.InvokeAsync();
        }
    }
    private void ApplySort(PropertyInfo column)
    {
        if (SortColumn == column)
        {
            SortDescending = !SortDescending;
        }
        else
        {
            SortColumn = column;
            SortDescending = false;
        }
    }

    private IEnumerable<TItem> SortedAndFilteredItems =>
        Items == null ? Enumerable.Empty<TItem>() : ApplySortFilter(Items);

    private IEnumerable<TItem> ApplySortFilter(IEnumerable<TItem> source)
    {
        var filtered = ApplyFilters(source);

        if (SortColumn == null)
            return filtered;

        return SortDescending
            ? filtered.OrderByDescending(item => SortColumn.GetValue(item))
            : filtered.OrderBy(item => SortColumn.GetValue(item));
    }

    private IEnumerable<TItem> ApplyFilters(IEnumerable<TItem> source)
    {
        foreach (var filter in Filters)
        {
            var prop = typeof(TItem).GetProperty(filter.Key);
            if (prop == null || string.IsNullOrWhiteSpace(filter.Value)) continue;

            var val = filter.Value.Trim().ToLowerInvariant();

            source = source.Where(item =>
            {
                var raw = prop.GetValue(item);
                if (raw == null) return false;

                if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(bool?))
                {
                    return bool.TryParse(val, out var boolVal) && (bool?)raw == boolVal;
                }

                if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                {
                    if (DateTime.TryParse(val, out var dateVal))
                    {
                        var propVal = (DateTime?)raw;
                        return propVal?.Date == dateVal.Date;
                    }
                    return false;
                }

                if (prop.PropertyType == typeof(TimeOnly) || prop.PropertyType == typeof(TimeOnly?))
                {
                    if (TimeOnly.TryParse(val, out var timeVal))
                    {
                        var propVal = (TimeOnly?)raw;
                        return propVal == timeVal;
                    }
                    return false;
                }

                var str = raw.ToString()?.ToLowerInvariant();
                return str != null && str.Contains(val);
            });
        }

        return source;
    }
}
